{"metadata":{"name":"","signature":"sha256:23d6643478ee2f4073695e5d9dafd13bb3aaabc351c78fedd58f6ece1b2cc68b"},"nbformat_minor":0,"nbformat":3,"worksheets":[{"cells":[{"collapsed":false,"input":["import pandas as pd\n","import numpy as np\n","import sklearn as sk\n","print 'pandas version: ',pd.__version__\n","print 'numpy version:',np.__version__\n","print 'sklearn version:',sk.__version__"],"outputs":[{"stream":"stdout","text":["pandas version:  0.13.1\n","numpy version: 1.8.0\n","sklearn version: 0.14.1\n"],"output_type":"stream"}],"language":"python","prompt_number":1,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["data_dir='/Users/yoavfreund/BigData/UCSD_BigData/data/weather'\n","!ls $data_dir\n","!pwd"],"outputs":[{"stream":"stdout","text":["ALL.head.csv                SAMPLE_TMAX.csv.old.gz      ghcnd-readme.txt            ghcnd-stations_buffered.txt\r\n","SAMPLE_TMAX.csv             data-source.txt             ghcnd-stations.txt          ghcnd-version.txt\r\n"],"output_type":"stream"},{"stream":"stdout","text":["/Users/yoavfreund/BigData/UCSD_BigData/notebooks/weather.mapreduce\r\n"],"output_type":"stream"}],"language":"python","prompt_number":2,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["!cp ../mrjob/mr_word_freq_counters.py mr_weather.py\n","%load mr_weather.py"],"outputs":[],"language":"python","prompt_number":35,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["%load coding.py"],"outputs":[],"language":"python","prompt_number":121,"metadata":{},"cell_type":"code"},{"language":"python","metadata":{},"input":["import base64,pickle,zlib,sys\n","import pdb\n","\"\"\"\n","Functions for encoding and decoding arbitrary object into ascii \n","so that they can be passed through the hadoop streaming interface.\n","\"\"\"\n","\n","def loads(eVal):\n","    \"\"\" Decode a string into a value \"\"\"\n","    return pickle.loads(zlib.decompress(base64.b64decode(eVal)))\n","\n","def dumps(Value):\n","    \"\"\" Encode a value as a string \"\"\"\n","    return base64.b64encode(zlib.compress(pickle.dumps(Value),9))\n","\n","def load_line(line):\n","    (key,eVal)=line.split('\\t')\n","    return(key,loads(eVal))\n","\n","def dump_line(key,Value,out=sys.stdout):\n","    out.write(key,dumps(Value))\n","\n"],"cell_type":"code","collapsed":false,"outputs":[]},{"collapsed":false,"input":["%%writefile Stations_Statistics.py\n","#!/usr/bin/python\n","\"\"\"\n","collect the statistics for each station.\n","\"\"\"\n","from mrjob.job import MRJob\n","from mrjob.protocol import *\n","import re,pickle,json\n","from sys import stderr\n","\n","import base64,pickle,zlib,sys\n","import pdb\n","\"\"\"\n","Functions for encoding and decoding arbitrary object into ascii \n","so that they can be passed through the hadoop streaming interface.\n","\"\"\"\n","\n","def loads(eVal):\n","    \"\"\" Decode a string into a value \"\"\"\n","    return pickle.loads(zlib.decompress(base64.b64decode(eVal)))\n","\n","def dumps(Value):\n","    \"\"\" Encode a value as a string \"\"\"\n","    return base64.b64encode(zlib.compress(pickle.dumps(Value),9))\n","\n","#logfile=open('log','w')\n","logfile=stderr\n","\n","class MRWeather(MRJob):\n","\n","    def mapper(self, _, line):\n","        self.increment_counter('MrJob Counters','mapper',1)\n","        elements=line.split(',')\n","        yield(elements[0],elements[1:])\n","            \n","    def check_integrity(self,meas,year,length):\n","        try:\n","            year=int(year)\n","        except:\n","            return False\n","        if year<1000 or year > 2014: return False\n","        if meas=='': return False\n","        if length != 367: return False\n","        return True\n","    \n","    def reducer(self, station, vectors):\n","        # self.increment_counter('MrJob Counters','reducer',1)\n","        #logfile.write(station+'\\n')\n","        S={}\n","        for vector in vectors:\n","            meas=vector[0]\n","            year=vector[1]\n","            length=len(vector)\n","            no_defined=sum([e!='' for e in vector[2:]])\n","            #logfile.write('%s: %s, %d, %d\\n'%(station,meas,year,no_defined))\n","            \n","            if self.check_integrity(meas,year,length):\n","                S[(meas,int(year))]=no_defined\n","            else:\n","                logfile.write('reduce, bad input:'+station+','.join(vector))\n","\n","        #logfile.write('Reduce Yields %s: %s\\n'%(station,pickle.dumps(S,protocol=0)))\n","        yield(station,dumps(S))\n","                              \n","if __name__ == '__main__':\n","    MRWeather.run()"],"outputs":[{"stream":"stdout","text":["Overwriting Stations_Statistics.py\n"],"output_type":"stream"}],"language":"python","prompt_number":136,"metadata":{},"cell_type":"code"},{"cell_type":"code","collapsed":false,"input":["!python Stations_Statistics.py /Users/yoavfreund/BigData/UCSD_BigData/data/weather/ALL.head.csv > StationStatistics.pkl "]},{"collapsed":false,"input":["ls -lrt"],"outputs":[{"stream":"stdout","text":["total 4104\r\n","-rwxr-xr-x  1 yoavfreund  staff     1408 May  7 09:22 \u001B[31mmap-year-temp.py\u001B[m\u001B[m*\r\n","-rwxr-xr-x  1 yoavfreund  staff     1226 May  7 09:22 \u001B[31mreduce-year-temp.py\u001B[m\u001B[m*\r\n","-rwxr-xr-x  1 yoavfreund  staff     5136 May  7 09:23 \u001B[31mStatistics.py\u001B[m\u001B[m*\r\n","-rw-r--r--  1 yoavfreund  staff      698 May  7 09:35 README.txt\r\n","-rwxr-xr-x  1 yoavfreund  staff      723 May  7 09:36 \u001B[31mEigen-by-Station.sh\u001B[m\u001B[m*\r\n","-rw-r--r--  1 yoavfreund  staff     6742 May  7 09:38 Dates.pkl\r\n","-rw-r--r--  1 yoavfreund  staff  1826703 May  7 18:00 stations.pkl.gz\r\n","-rw-r--r--  1 yoavfreund  staff     1610 May  8 07:13 mr_word_freq_count.py\r\n","-rw-r--r--  1 yoavfreund  staff     2506 May  8 08:23 Description of Assignment.ipynb\r\n","-rw-r--r--  1 yoavfreund  staff     1198 May  9 07:58 mr_weather.py\r\n","-rw-r--r--  1 yoavfreund  staff   118123 May  9 17:10 mrjob and EMR.ipynb\r\n","-rwxr-xr-x  1 yoavfreund  staff      586 May 10 15:20 \u001B[31mcoding.py\u001B[m\u001B[m*\r\n","-rw-r--r--  1 yoavfreund  staff     1442 May 10 15:20 Stations_Statistics.py\r\n","-rw-r--r--  1 yoavfreund  staff     1523 May 10 15:20 coding.pyc\r\n","-rw-r--r--  1 yoavfreund  staff        0 May 10 15:38 StationStatistics.pkl\r\n","-rw-r--r--  1 yoavfreund  staff        0 May 10 15:41 stations.pkl\r\n","-rw-r--r--  1 yoavfreund  staff        0 May 10 15:42 counts\r\n","-rw-r--r--  1 yoavfreund  staff    31058 May 10 15:43 weather_MRjob.ipynb\r\n","-rw-r--r--  1 yoavfreund  staff     1540 May 10 17:33 XX\r\n","-rw-r--r--  1 yoavfreund  staff    57723 May 10 17:33 Stations_Statistics.ipynb\r\n"],"output_type":"stream"}],"language":"python","prompt_number":117,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["job_flow_id='j-BPX1DCPJZHBT'\n","!python  Stations_Statistics.py --file coding.py -r emr --emr-job-flow-id=$job_flow_id hdfs:/weather/weather.csv > StationStatistics.pkl"],"outputs":[{"stream":"stdout","text":["using configs in /Users/yoavfreund/.mrjob.conf\r\n"],"output_type":"stream"},{"stream":"stdout","text":["creating tmp directory /var/folders/80/c2kfvdvx5cx570r4vlzqgb840000gq/T/Stations_Statistics.yoavfreund.20140511.023633.738735\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Copying non-input files into s3://yoav.hadoop/scratch/Stations_Statistics.yoavfreund.20140511.023633.738735/files/\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Adding our job to existing job flow j-BPX1DCPJZHBT\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 30.5s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 61.0s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 91.6s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 122.1s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 152.6s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 183.1s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 213.6s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 244.1s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 274.7s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 305.2s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 335.9s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 366.7s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 397.2s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 427.7s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job launched 458.2s ago, status RUNNING: Running step (Stations_Statistics.yoavfreund.20140511.023633.738735: Step 1 of 1)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Job completed.\r\n","Running time was 440.0s (not counting time spent waiting for the EC2 instances)\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Fetching counters from SSH...\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Counters from step 1:\r\n","  File Input Format Counters :\r\n","    Bytes Read: 7670788923\r\n","  File Output Format Counters :\r\n","    Bytes Written: 108837236\r\n","  FileSystemCounters:\r\n","    FILE_BYTES_READ: 6942498074\r\n","    FILE_BYTES_WRITTEN: 10374522569\r\n","    HDFS_BYTES_READ: 7670794803\r\n","    S3_BYTES_WRITTEN: 108837236\r\n","  Job Counters :\r\n","    Data-local map tasks: 57\r\n","    Launched map tasks: 60\r\n","    Launched reduce tasks: 10\r\n","    Rack-local map tasks: 3\r\n","    SLOTS_MILLIS_MAPS: 3770502\r\n","    SLOTS_MILLIS_REDUCES: 1579116\r\n","    Total time spent by all maps waiting after reserving slots (ms): 0\r\n","    Total time spent by all reduces waiting after reserving slots (ms): 0\r\n","  Map-Reduce Framework:\r\n","    CPU time spent (ms): 3323350\r\n","    Combine input records: 0\r\n","    Combine output records: 0\r\n","    Map input bytes: 7668890105\r\n","    Map input records: 9358395\r\n","    Map output bytes: 18019274975\r\n","    Map output materialized bytes: 3457612075\r\n","    Map output records: 9358395\r\n","    Physical memory (bytes) snapshot: 36318363648\r\n","    Reduce input groups: 85284\r\n","    Reduce input records: 9358395\r\n","    Reduce output records: 85284\r\n","    Reduce shuffle bytes: 3457612075\r\n","    SPLIT_RAW_BYTES: 5880\r\n","    Spilled Records: 28075185\r\n","    Total committed heap usage (bytes): 33451671552\r\n","    Virtual memory (bytes) snapshot: 126789832704\r\n","  MrJob Counters:\r\n","    mapper: 9358395\r\n"],"output_type":"stream"},{"stream":"stdout","text":["Streaming final output from s3://yoav.hadoop/scratch/Stations_Statistics.yoavfreund.20140511.023633.738735/output/\r\n"],"output_type":"stream"},{"stream":"stdout","text":["removing tmp directory /var/folders/80/c2kfvdvx5cx570r4vlzqgb840000gq/T/Stations_Statistics.yoavfreund.20140511.023633.738735\r\n","Removing all files in s3://yoav.hadoop/scratch/Stations_Statistics.yoavfreund.20140511.023633.738735/\r\n"],"output_type":"stream"},{"stream":"stdout","text":["S3ResponseError: 403 Forbidden\r\n","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n","<Error><Code>RequestTimeTooSkewed</Code><Message>The difference between the request time and the current time is too large.</Message><MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds><RequestId>5724C305BBEA2FA0</RequestId><HostId>cdmhq39s7Zl2KVGnXZYUveAZSELGSCWjhe5DbjT7tYKiRH0ch4jTMMYA1VH8bRLq</HostId><RequestTime>Sun, 11 May 2014 02:48:35 GMT</RequestTime><ServerTime>2014-05-11T03:06:56Z</ServerTime></Error>\r\n","Traceback (most recent call last):\r\n","  File \"//anaconda/lib/python2.7/site-packages/mrjob/emr.py\", line 1041, in _cleanup_remote_scratch\r\n","    self.rm(self._s3_tmp_uri)\r\n","  File \"//anaconda/lib/python2.7/site-packages/mrjob/fs/composite.py\", line 84, in rm\r\n","    return self._do_action('rm', path_glob)\r\n","  File \"//anaconda/lib/python2.7/site-packages/mrjob/fs/composite.py\", line 54, in _do_action\r\n","    return getattr(fs, action)(path, *args, **kwargs)\r\n","  File \"//anaconda/lib/python2.7/site-packages/mrjob/fs/s3.py\", line 186, in rm\r\n","    key.delete()\r\n","  File \"//anaconda/lib/python2.7/site-packages/boto/s3/key.py\", line 523, in delete\r\n","    headers=headers)\r\n","  File \"//anaconda/lib/python2.7/site-packages/boto/s3/bucket.py\", line 757, in delete_key\r\n","    query_args_l=None)\r\n","  File \"//anaconda/lib/python2.7/site-packages/boto/s3/bucket.py\", line 776, in _delete_key_internal\r\n","    response.reason, body)\r\n","S3ResponseError: S3ResponseError: 403 Forbidden\r\n","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n","<Error><Code>RequestTimeTooSkewed</Code><Message>The difference between the request time and the current time is too large.</Message><MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds><RequestId>5724C305BBEA2FA0</RequestId><HostId>cdmhq39s7Zl2KVGnXZYUveAZSELGSCWjhe5DbjT7tYKiRH0ch4jTMMYA1VH8bRLq</HostId><RequestTime>Sun, 11 May 2014 02:48:35 GMT</RequestTime><ServerTime>2014-05-11T03:06:56Z</ServerTime></Error>\r\n"],"output_type":"stream"}],"language":"python","prompt_number":137,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["!cat counts"],"outputs":[],"language":"python","prompt_number":35,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["import json\n","A={u'a':1,u'gg':23}\n","print A\n","print json.dumps(A)"],"outputs":[{"stream":"stdout","text":["{u'a': 1, u'gg': 23}\n","{\"a\": 1, \"gg\": 23}\n"],"output_type":"stream"}],"language":"python","prompt_number":24,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["more mr_weather.py"],"outputs":[],"language":"python","prompt_number":111,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["!head -2 XX"],"outputs":[{"stream":"stdout","text":["\"DATX\"\t6001\r\n","\"FRGT\"\t282\r\n"],"output_type":"stream"}],"language":"python","prompt_number":118,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["!ls -lrt"],"outputs":[{"stream":"stdout","text":["total 216664\r\n","-rwxr-xr-x  1 yoavfreund  staff       1408 May  7 09:22 \u001B[31mmap-year-temp.py\u001B[m\u001B[m\r\n","-rwxr-xr-x  1 yoavfreund  staff       1226 May  7 09:22 \u001B[31mreduce-year-temp.py\u001B[m\u001B[m\r\n","-rwxr-xr-x  1 yoavfreund  staff       5136 May  7 09:23 \u001B[31mStatistics.py\u001B[m\u001B[m\r\n","-rw-r--r--  1 yoavfreund  staff        698 May  7 09:35 README.txt\r\n","-rwxr-xr-x  1 yoavfreund  staff        723 May  7 09:36 \u001B[31mEigen-by-Station.sh\u001B[m\u001B[m\r\n","-rw-r--r--  1 yoavfreund  staff       6742 May  7 09:38 Dates.pkl\r\n","-rw-r--r--  1 yoavfreund  staff    1826703 May  7 18:00 stations.pkl.gz\r\n","-rw-r--r--  1 yoavfreund  staff       1610 May  8 07:13 mr_word_freq_count.py\r\n","-rw-r--r--  1 yoavfreund  staff       2506 May  8 08:23 Description of Assignment.ipynb\r\n","-rw-r--r--  1 yoavfreund  staff       1198 May  9 07:58 mr_weather.py\r\n","-rw-r--r--  1 yoavfreund  staff     118123 May  9 17:10 mrjob and EMR.ipynb\r\n","-rwxr-xr-x  1 yoavfreund  staff        586 May 10 15:20 \u001B[31mcoding.py\u001B[m\u001B[m\r\n","-rw-r--r--  1 yoavfreund  staff       1523 May 10 15:20 coding.pyc\r\n","-rw-r--r--  1 yoavfreund  staff          0 May 10 15:41 stations.pkl\r\n","-rw-r--r--  1 yoavfreund  staff          0 May 10 15:42 counts\r\n","-rw-r--r--  1 yoavfreund  staff      31058 May 10 15:43 weather_MRjob.ipynb\r\n","-rw-r--r--  1 yoavfreund  staff       1540 May 10 17:33 XX\r\n","-rw-r--r--  1 yoavfreund  staff       1930 May 10 19:36 Stations_Statistics.py\r\n","-rw-r--r--  1 yoavfreund  staff      50395 May 10 19:37 Stations_Statistics.ipynb\r\n","-rw-r--r--  1 yoavfreund  staff  108837332 May 10 19:48 StationStatistics.pkl\r\n"],"output_type":"stream"}],"language":"python","prompt_number":138,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["min_year=1700\n","num_years=2014-min_year\n","def count(years):\n","    counts=np.zeros(num_years)\n","    for year in years:\n","        assert year>=min_year\n","        counts[year-min_year]+=1\n","    return counts"],"outputs":[],"language":"python","prompt_number":176,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["counts=np.zeros(num_years)\n","for station in Table.keys():\n","    years=sorted([year for (meas,year) in Table[station]])\n","    counts=counts+count(years)"],"outputs":[],"language":"python","prompt_number":169,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["OLD_stations=[]\n","for station in Table.keys():\n","    years=sorted([year for (meas,year) in Table[station]])\n","    hist=count(years)\n","    years_1800=sum(hist[:100])\n","    if years_1800>0:\n","        OLD_stations.append((station,years_1800))"],"outputs":[],"language":"python","prompt_number":184,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["OLD_stations"],"outputs":[{"metadata":{},"output_type":"pyout","prompt_number":185,"text":["[('\"EZE00100082\"', 50.0),\n"," ('\"GM000010962\"', 15.0),\n"," ('\"ITE00100554\"', 74.0),\n"," ('\"ITE00105250\"', 2.0)]"]}],"language":"python","prompt_number":185,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["stations=pickle.load(open('stations.pkl','rb'))\n","len(stations)"],"outputs":[{"metadata":{},"output_type":"pyout","prompt_number":189,"text":["85284"]}],"language":"python","prompt_number":189,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["station_IDs=[ID[1:-1] for (ID,N) in OLD_stations]\n","station_IDs"],"outputs":[{"metadata":{},"output_type":"pyout","prompt_number":201,"text":["['EZE00100082', 'GM000010962', 'ITE00100554', 'ITE00105250']"]}],"language":"python","prompt_number":201,"metadata":{},"cell_type":"code"},{"collapsed":true,"input":["stations.loc[station_IDs,:]"],"outputs":[{"metadata":{},"output_type":"pyout","prompt_number":202,"html":["<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>elevation</th>\n","      <th>state</th>\n","      <th>name</th>\n","      <th>GSNFLAG</th>\n","      <th>HCNFLAG</th>\n","      <th>WMOID</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>EZE00100082</th>\n","      <td> 50.0906</td>\n","      <td> 14.4192</td>\n","      <td> 191</td>\n","      <td> NaN</td>\n","      <td> PRAHA-KLEMENTINUM</td>\n","      <td> NaN</td>\n","      <td> NaN</td>\n","      <td>   NaN</td>\n","    </tr>\n","    <tr>\n","      <th>GM000010962</th>\n","      <td> 47.8017</td>\n","      <td> 11.0117</td>\n","      <td> 977</td>\n","      <td> NaN</td>\n","      <td>  HOHENPEISSENBERG</td>\n","      <td> GSN</td>\n","      <td> NaN</td>\n","      <td> 10962</td>\n","    </tr>\n","    <tr>\n","      <th>ITE00100554</th>\n","      <td> 45.4717</td>\n","      <td>  9.1892</td>\n","      <td> 150</td>\n","      <td> NaN</td>\n","      <td>             MILAN</td>\n","      <td> NaN</td>\n","      <td> NaN</td>\n","      <td>   NaN</td>\n","    </tr>\n","    <tr>\n","      <th>ITE00105250</th>\n","      <td> 38.1103</td>\n","      <td> 13.3514</td>\n","      <td>  37</td>\n","      <td> NaN</td>\n","      <td>           PALERMO</td>\n","      <td> NaN</td>\n","      <td> NaN</td>\n","      <td>   NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4 rows × 8 columns</p>\n","</div>"],"text":["             latitude  longitude  elevation state               name GSNFLAG  \\\n","EZE00100082   50.0906    14.4192        191   NaN  PRAHA-KLEMENTINUM     NaN   \n","GM000010962   47.8017    11.0117        977   NaN   HOHENPEISSENBERG     GSN   \n","ITE00100554   45.4717     9.1892        150   NaN              MILAN     NaN   \n","ITE00105250   38.1103    13.3514         37   NaN            PALERMO     NaN   \n","\n","            HCNFLAG  WMOID  \n","EZE00100082     NaN    NaN  \n","GM000010962     NaN  10962  \n","ITE00100554     NaN    NaN  \n","ITE00105250     NaN    NaN  \n","\n","[4 rows x 8 columns]"]}],"language":"python","prompt_number":202,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["plot_years=100\n","plot(range(min_year,min_year+plot_years),counts[:plot_years])"],"outputs":[{"metadata":{},"output_type":"pyout","prompt_number":171,"text":["[<matplotlib.lines.Line2D at 0x1c6b1a610>]"]},{"metadata":{},"output_type":"display_data","png":"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\nhg0bjDHGHDt2zEyfPt20tbWZ+vp6U1xcbDo7O40xxsyaNcscPHjQGGPMggULzEsvvTTQl7VSLGvx\n1ltvmYaGBmOMMf/4xz9MYWFh93HpthZdli5dau677z7z5JNPdj+XbmvR3t5uKioqzJEjR4wxxly8\neNFEIhFjTPqtxZYtW8zy5cuNMcZcuXLFFBUVmffee88Y49+1mDt3rqmpqTHGGLNr1y4TCoWMMe5m\n54ANfc6cOcrNze3vLwL94Q9/0IoVKyRJO3fu1IoVK5SVlaWioiJNmjRJBw8eVENDg/773/+qqqpK\nkvTNb35TL7zwwuB/01gmlrWorKxUfn6+JKmsrEwtLS1qb29Py7WQpBdeeEGf+cxnVFZW1v1cOq7F\n7t27VVFR0d3acnNzlZGRkZZrUVBQoObmZkUiETU3Nys7O1ujRo3y9VoUFBTo0qVLkqTGxkYVFhZK\ncjc7474516uvvqq8vLzul9t88MEH17yMsevCo97PFxYW+u6CpN5rcbUdO3ZoxowZysrK0pkzZ9Ju\nLZqamvTTn/5U1dXV1xyXjmtx4sQJBQIBffnLX9aMGTO0efNmSem5FvPnz9eoUaNUUFCgoqIirVu3\nTqNHj/b1WmzatEmPPvqoPvWpT2ndunXauHGjJHez0/GrXHrbvn27vva1r8X7232lv7U4duyYfvCD\nH2jPnj1JmCo5eq9FdXW1HnnkEQ0bNkwmzX7+3nst2tvb9dprr+nNN99UTk6O5s2bpxkzZuimm25K\n4pQ3Ru+12LZtm1paWtTQ0KCLFy9qzpw5mjdvXhIn9N6aNWv0zDPPaMmSJfrjH/+o1atXu54NcQV6\nR0eH/vSnP6murq77ud4XHp0+fVrjx49XYWGhTp8+fc3zXf/U8IO+1kKK/jnvvfdebd26VRMnTpSk\ntFyL2tpa7dixQ9/73vfU2NiojIwM5eTk6N577027tZgwYYLuuOMOjRkzRpK0cOFC1dXV6etf/3ra\nrcVf//pXLVmyREOGDNHYsWN1++236/Dhw5o9e7Zv16K2tlZ79+6VJC1btkz333+/JHezM64tl717\n96q0tFS3XHVp2z333KPf/e53amtrU319vU6cOKGqqirl5+dr1KhROnjwoIwx2rp1q77yla/E82Wt\n1NdaNDY2atGiRXriiSd02223dT9fUFCQdmvxyiuvqL6+XvX19Vq7dq0ee+wxPfjgg2n5fTF//nwd\nPXpULS0t6ujo0IEDBzR16tS0XIuSkhLt27dPktTc3Kw33nhDJSUlvl6LSZMm6cCBA5Kkffv26bOf\n/awkl7NzoJ+YLl++3BQUFJjs7Gwzfvx485vf/MYYY8y3v/1t8+yzz153/E9+8hNTXFxspkyZ0v3T\nXGOMefPNN015ebkpLi42Dz300IA/pbVVLGuxYcMGM3z4cFNZWdn9cf78eWNM+q3F1aqrq81TTz3V\n/Tgd12Lbtm1m6tSppry83Hz/+9/vfj7d1qK1tdWsXLnSlJeXm7Kysmte/eSntcjKyupei0OHDpmq\nqiozffp08/nPf97U1dV1H+9WdnJhEQD4BG9BBwA+QaADgE8Q6ADgEwQ6APgEgQ4APkGgA4BPEOgA\n4BMEOgD4xP8DdMFwUpZJ1+UAAAAASUVORK5CYII=\n","text":["<matplotlib.figure.Figure at 0x109dba790>"]}],"language":"python","prompt_number":171,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["pickle.dump(Table,open('Table.pkl','wb'),protocol=pickle.HIGHEST_PROTOCOL)"],"outputs":[],"language":"python","prompt_number":158,"metadata":{},"cell_type":"code"},{"collapsed":false,"input":["counts[60:70]"],"outputs":[{"metadata":{},"output_type":"pyout","prompt_number":172,"text":["array([ 0.,  0.,  0.,  2.,  2.,  2.,  2.,  2.,  2.,  2.])"]}],"language":"python","prompt_number":172,"metadata":{},"cell_type":"code"},{"cell_type":"markdown","metadata":{},"source":["The earliest year for which we have records is 1763 !"]},{"collapsed":false,"input":[],"outputs":[{"stream":"stdout","text":["-rw-r--r--  1 yoavfreund  staff  1826703 May  7 18:00 stations.pkl.gz\r\n","-rw-r--r--  1 yoavfreund  staff        0 May 10 15:41 stations.pkl\r\n"],"output_type":"stream"}],"language":"python","prompt_number":187,"metadata":{},"cell_type":"code"},{"language":"python","metadata":{},"input":[],"cell_type":"code","collapsed":false,"outputs":[]}],"metadata":{}}]}